# Generators
# generators v/s list comprehensions
	# List comprehension- returns a list
	# Generators - returns a generator object
	# Both can be iterated over
	# list comprehensions and generator expressions look very similar in their syntax, except for the use of parentheses 
	# () in generator expressions and brackets [] in list comprehensions.
# Create generator object: result
result = (num for num in range(0,31))

# Print the first 5 values
print(next(result))		# 0
print(next(result))		# 1
print(next(result))		# 2
print(next(result))		# 3
print(next(result))		# 4

# Print the rest of the values
for value in result:
    print(value)
#5
#6
#7
# ....#30

# Another example
# Create a list of strings: lannister
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Create a generator object: lengths
lengths = (len(person) for person in lannister)

# Iterate over and print the values in lengths
for value in lengths:
    print(value)
# 6
# 5
# 5
# 6
# 7

# Generator functions are functions that, like generator expressions, 
# yield a series of values, instead of returning a single value. 
# A generator function is defined as you do a regular function, but 
# whenever it generates a value, it uses the keyword yield instead of return.
 # Create a list of strings
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield len(person)
        
# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)
# 6
# 5
# 5
# 6
# 7

import pandas as pd
# List comprehensions for time-stamped data
df = pd.read_csv("dataset/tweets.csv")
# Extract the created_at column from df: tweet_time
tweet_time = df['created_at']

# Extract the clock time: tweet_clock_time
tweet_clock_time = [entry[11:19] for entry in tweet_time]

# with conditionals
# Extract the clock time: tweet_clock_time
tweet_clock_time_con = [entry[11:19] for entry in tweet_time if entry[17:19] == '19']

# Print the extracted times
print(tweet_clock_time)
print(tweet_clock_time_con)